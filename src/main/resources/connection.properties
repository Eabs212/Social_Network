dbUrl = jdbc:postgresql://localhost:5432/social-network
dbUser = postgres
dbPassword = masterkey
dbDriver = org.postgresql.Driver

dir = \\Documents\\Git\\Social_Network\\src\\main\\webapp\\assets\\users\\
dirWeb = ./.././assets/users/
checkUser = SELECT * FROM users WHERE user_username = ? OR user_email = ?
registerUser = INSERT INTO users (user_username, user_password, user_name, user_lastname, user_email, user_birthday, user_creation_time, type_user_id, user_sex, user_enabled, user_avatar) VALUES(?, ?, ?, ?, ?, ?, ?, 2, ?, true, 'notiene')
loginUser = SELECT * from users WHERE user_username = ? AND user_password = ?
updateUser = UPDATE users SET user_name = ? , user_lastname = ? , user_email = ? , user_birthday = ? , user_sex = ? WHERE user_username = ?;
#busqueda
searchUsers = SELECT * FROM users WHERE user_username LIKE ? OR user_name LIKE ? OR user_lastname LIKE ? AND type_user_id = 2 AND user_enabled = true;
addFriend = INSERT INTO friends (user_id1, user_id2, date) SELECT u.user_id, u2.user_id, now() FROM users u, users u2 WHERE u.user_id = ? AND u2.user_id = ?; INSERT INTO friends (user_id2, user_id1) SELECT u.user_id, u2.user_id FROM users u, users u2 WHERE u.user_id = ? AND u2.user_id = ?;
friendList = SELECT u.* FROM users u INNER JOIN friends f ON f.user_id2 = u.user_id INNER JOIN users u2 ON f.user_id1 = u2.user_id WHERE u2.user_username = ? AND u.user_enabled = TRUE;
searchFriends = SELECT u.* FROM users u INNER JOIN friends f ON f.user_id2 = u.user_id INNER JOIN users u2 ON f.user_id1 = u2.user_id WHERE u2.user_username = ? AND u.user_enabled = TRUE AND (u.user_username LIKE ? OR u.user_name LIKE ? OR u.user_lastname LIKE ?);
isFriend = SELECT friends_id from friends f INNER JOIN users u ON f.user_id1 = u.user_id INNER JOIN users u2 ON f.user_id2 = u2.user_id WHERE u2.user_id = ? AND u.user_id = ?
deleteFriend = DELETE FROM friends f USING users u, users u2 WHERE f.user_id1 = u.user_id AND u.user_id = ? AND f.user_id2 = u2.user_id AND u2.user_id = ?; DELETE FROM friends f USING users u, users u2 WHERE f.user_id2 = u2.user_id AND u2.user_id = ? AND f.user_id1 = u.user_id AND u.user_id = ?;
getUser = SELECT * FROM users WHERE user_username = ?
#post
getPostsWithoutLimit=SELECT post_id, p.type_post_id, p.post_text, p.post_url, p.post_creation_time, u.user_username, u.user_name, u.user_lastname, u.user_avatar, u.user_id FROM post p INNER JOIN users u ON p.user_id = u.user_id WHERE p.user_id IN (SELECT f.user_id2 FROM friends f WHERE f.user_id1 = ?) OR p.user_id = ? ORDER BY post_creation_time DESC LIMIT 20;
getPosts = SELECT p.post_id, p.type_post_id, p.post_text, p.post_url, p.post_creation_time, u.user_username, u.user_name, u.user_lastname, u.user_avatar, u.user_id FROM post p INNER JOIN users u ON p.user_id = u.user_id WHERE p.user_id IN (SELECT f.user_id2 FROM friends f WHERE f.user_id1 = ?) OR p.user_id = ? AND p.post_id < ? ORDER BY post_creation_time DESC LIMIT 20;
getUserPosts = SELECT post_id, type_post_id, post_text, post_url, post_creation_time FROM post WHERE user_id = ? ORDER BY post_creation_time DESC LIMIT 5
addPost = INSERT INTO post (user_id, type_post_id, post_text, post_url, post_creation_time) VALUES(?, ?, ?, ?, now());
deletePost = DELETE FROM likes WHERE post_id = ?; DELETE FROM comments WHERE post_id = ?; DELETE FROM post WHERE user_id = ? AND post_id = ?;
#likes
insertLike = INSERT INTO likes (user_id, post_id, type_like_id) VALUES(?, ?, ?) RETURNING like_id,user_id,type_like_id;
deleteLike = DELETE FROM likes WHERE user_id = ? AND like_id = ?;
updateLike = UPDATE likes SET type_like_id = ? WHERE user_id = ? AND like_id = ?;
getLikes = SELECT l.like_id, l.user_id, l.type_like_id, u.user_username, u.user_name, u.user_lastname FROM likes l INNER JOIN users u ON u.user_id = l.user_id WHERE post_id = ?;
#comments
getComments = SELECT c.comment_id, c.comment_text, c.comment_url, c.user_id, u.user_username, u.user_name, u.user_lastname FROM comments c INNER JOIN users u ON c.user_id = u.user_id WHERE c.post_id = ?;
insertComment = INSERT INTO comments (user_id, post_id, comment_text, comment_url) SELECT u.user_id, p.post_id, ?, null FROM users u, post p WHERE p.post_id = ? AND u.user_id = ?;
deleteComment = DELETE FROM comments WHERE user_id = ? AND comment_id = ?;
#notifications
checkFriendReq = SELECT * from notifications where notification_sender = ? AND notification_receiver = ? AND type_notification_id = 1 AND notification_accepted IS NULL;
getNotifications = SELECT n.notification_id, n.notification_sender, n.notification_receiver, n.notification_date, n.notification_accepted, n.type_notification_id, u.user_username, u.user_name, u.user_lastname FROM notifications n INNER JOIN users u ON n.notification_sender = u.user_id WHERE n.notification_receiver = ? ORDER BY notification_date DESC LIMIT ?;
insertNotification = INSERT INTO notifications (notification_sender, notification_receiver, type_notification_id, notification_date, notification_accepted) VALUES (?, ?, ?, now(), ?)
setAcceptedNotification = UPDATE notifications SET notification_accepted = ? WHERE notification_sender = ? and notification_receiver = ? AND type_notification_id = 1;
deleteNotification = DELETE FROM notifications WHERE notifications_id = ?;
#admin
getAllPosts = SELECT p.*, u.user_username, u.user_name, u.user_lastname, u.user_id FROM post p INNER JOIN users u ON u.user_id = p.user_id WHERE u.user_enabled = true;
getAllUsers = SELECT * FROM users WHERE user_enabled = true AND type_user_id != 1;
getUsersByAge = SELECT * FROM users WHERE user_enabled = true ORDER BY user_birthday DESC;
getUsersByPost = SELECT u.user_id, u.user_username, u.user_name, u.user_lastname, count(p.user_id), u.type_user_id, u.user_sex, u.user_enabled from post p INNER JOIN users u ON u.user_id = p.user_id WHERE u.user_enabled = true GROUP BY u.user_id HAVING count(p.user_id) >0 ORDER BY COUNT(p.user_id) DESC
getUsersByFriends = SELECT  count(f.user_id1), u.user_username, u.user_name, u.user_lastname, u.user_id, u.type_user_id, u.user_sex, u.user_enabled from friends f INNER JOIN users u ON u.user_id = f.user_id1 WHERE u.user_enabled = true GROUP BY u.user_id HAVING count(f.user_id1) >0 ORDER BY COUNT(f.user_id1) DESC;
changeUserState = UPDATE users SET user_enabled=? WHERE user_id=?;
getPostsByContent=SELECT p.*, u.user_username, u.user_name, u.user_lastname, u.user_avatar, u.user_id, u.type_user_id, u.user_sex, u.user_enabled FROM post p INNER JOIN users u ON p.user_id = u.user_id WHERE post_text ILIKE ? AND u.user_enabled = true;
getCommentsByContent = SELECT c.comment_id, c.comment_text, c.comment_url, c.user_id, u.user_username, u.user_name, u.user_lastname, u.type_user_id, u.user_sex, u.user_enabled FROM comments c INNER JOIN users u ON c.user_id = u.user_id WHERE comment_text ILIKE ? AND u.user_enabled = true;
searchUsersAdmin = SELECT * FROM users WHERE user_username LIKE ? OR user_name LIKE ? OR user_lastname LIKE ?;
